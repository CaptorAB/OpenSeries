name: newgo

on: workflow_dispatch

env:
  POETRY_VER: 1.5.1

jobs:
  stage_python:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@v4
        id: setup_python
        with:
          python-version-file: '.python-version'

      - name: Restore cache
        uses: actions/cache/restore@v3
        id: restore_cache
        with:
          path: |
            ~/.local
            ./.venv
          key: venv-${{ runner.os }}-${{ hashFiles('.github/workflows/test.yml') }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry ${{ env.POETRY_VER }} on Python ${{ steps.setup_python.outputs.python-version }}
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VER }}
          virtualenvs-in-project: true
          virtualenvs-path: ./.venv

      - name: Install dependencies on Python ${{ steps.setup_python.outputs.python-version }}
        if: steps.restore_cache.outputs.cache-hit != 'true'
        run: |
          poetry config cache-dir ~/.local
          poetry config virtualenvs.options.no-pip true
          poetry config virtualenvs.options.no-setuptools true
          poetry config --list
          poetry install --no-root --with dev

      - name: Save cache
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.local
            ./.venv
          key: venv-${{ runner.os }}-${{ hashFiles('.github/workflows/test.yml') }}-${{ hashFiles('**/poetry.lock') }}

  run_tests:
    needs: stage_python
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        group: [ 1, 2, 3, 4, 5 ]

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@v4
        id: setup_python
        with:
          python-version-file: '.python-version'

      - name: Restore cache
        uses: actions/cache/restore@v3
        id: restore_cache
        with:
          path: |
            ~/.local
            ./.venv
          key: venv-${{ runner.os }}-${{ hashFiles('.github/workflows/test.yml') }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry ${{ env.POETRY_VER }} on Python ${{ steps.setup_python.outputs.python-version }}
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VER }}
          virtualenvs-in-project: true
          virtualenvs-path: ./.venv

      - name: Install dependencies on Python ${{ steps.setup_python.outputs.python-version }}
        if: steps.restore_cache.outputs.cache-hit != 'true'
        run: |
          poetry config cache-dir ~/.local
          poetry config virtualenvs.options.no-pip true
          poetry config virtualenvs.options.no-setuptools true
          poetry config --list
          poetry install --no-root --with dev

      - name: Tests with Pytest
        run: poetry run coverage run -m pytest --verbose --splits 5 --group ${{ matrix.group }} --splitting-algorithm least_duration ./

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage${{ matrix.group }}
          path: .coverage

      - name: Save cache
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.local
            ./.venv
          key: venv-${{ runner.os }}-${{ hashFiles('.github/workflows/test.yml') }}-${{ hashFiles('**/poetry.lock') }}

  report_coverage:
    needs: run_tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@v4
        id: setup_python
        with:
          python-version-file: '.python-version'

      - name: Restore cache
        uses: actions/cache/restore@v3
        id: restore_cache
        with:
          path: |
            ~/.local
            ./.venv
          key: venv-${{ runner.os }}-${{ hashFiles('.github/workflows/test.yml') }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry ${{ env.POETRY_VER }} on Python ${{ steps.setup_python.outputs.python-version }}
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VER }}
          virtualenvs-in-project: true
          virtualenvs-path: ./.venv

      - name: Install dependencies on Python ${{ steps.setup_python.outputs.python-version }}
        if: steps.restore_cache.outputs.cache-hit != 'true'
        run: |
          poetry config cache-dir ~/.local
          poetry config virtualenvs.options.no-pip true
          poetry config virtualenvs.options.no-setuptools true
          poetry config --list
          poetry install --no-root --with dev

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Report coverage
        run: |
          poetry run coverage combine coverage*/.coverage*
          poetry run coverage report

      - name: Save cache
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.local
            ./.venv
          key: venv-${{ runner.os }}-${{ hashFiles('.github/workflows/test.yml') }}-${{ hashFiles('**/poetry.lock') }}
