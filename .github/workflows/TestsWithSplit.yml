name: TestsWithSplit

on:
  workflow_dispatch:
  push:
    branches:
      - "*" # matches every branch that doesn't contain a '/'
      - "*/*" # matches every branch containing a single '/'
      - "**" # matches every branch

jobs:
  restore:
    runs-on: ubuntu-latest

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Read Python version from file '.python-version'
        shell: bash
        id: pyver
        run: echo "py_version=$(cat "$GITHUB_WORKSPACE/.python-version")" >> $GITHUB_OUTPUT

      - name: Setup environment with Python ${{ steps.pyver.outputs.py_version }}
        uses: ./.github/actions/setup_environment
        with:
          cache_version: ${{ secrets.GH_ACTIONS_CACHE_KEY }}
          python_version: ${{ steps.pyver.outputs.py_version }}
          poetry_group: --with test

  testing:
    needs: restore
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        group: [ 1, 2, 3, 4, 5 ]

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Read Python version from file '.python-version'
        shell: bash
        id: pyver
        run: echo "py_version=$(cat "$GITHUB_WORKSPACE/.python-version")" >> $GITHUB_OUTPUT

      - name: Restore dependencies from cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: |
            .venv
            poetry.lock
          key: venv-${{ runner.os }}-python-${{ steps.py.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('cache_version') }}

      - name: Install Poetry
        shell: bash
        run: |
          curl -O -sSL https://install.python-poetry.org/install-poetry.py
          python install-poetry.py -y --version 1.3.2
          echo "PATH=${HOME}/.poetry/bin:${PATH}" >> $GITHUB_ENV
          rm install-poetry.py

      - name: Install Dependencies
        shell: bash
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          poetry install --with test
          poetry env use ${{ steps.pyver.outputs.py_version }}

      - name: Tests with Pytest
        shell: bash
        run: poetry run coverage run -m pytest --verbose --durations=20 --durations-min=2.0 --splits 5 --group ${{ matrix.group }} --splitting-algorithm least_duration ./

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage${{ matrix.group }}
          path: .coverage

  coverage:
    needs: testing
    runs-on: ubuntu-latest

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Read Python version from file '.python-version'
        shell: bash
        id: pyver
        run: echo "py_version=$(cat "$GITHUB_WORKSPACE/.python-version")" >> $GITHUB_OUTPUT

      - name: Restore dependencies from cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: |
            .venv
            poetry.lock
          key: venv-${{ runner.os }}-python-${{ steps.py.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('cache_version') }}

      - name: Install poetry
        shell: bash
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          curl -O -sSL https://install.python-poetry.org/install-poetry.py
          python install-poetry.py -y --version 1.3.2
          echo "PATH=${HOME}/.poetry/bin:${PATH}" >> $GITHUB_ENV
          rm install-poetry.py

      - name: Install Dependencies
        shell: bash
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          poetry install --only coverage
          poetry env use ${{ steps.pyver.outputs.py_version }}

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Report coverage
        shell: bash
        run: |
          poetry run coverage combine coverage*/.coverage*
          poetry run coverage report
