name: TestsWithSplit

on:
  workflow_dispatch:
  push:
    branches:
      - "*" # matches every branch that doesn't contain a '/'
      - "*/*" # matches every branch containing a single '/'
      - "**" # matches every branch

jobs:
  testing:
    strategy:
      fail-fast: false
      matrix:
        group: [ 1, 2, 3, 4, 5 ]
    runs-on: ubuntu-latest

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Install poetry
        shell: bash
        run: |
          curl -O -sSL https://install.python-poetry.org/install-poetry.py
          python install-poetry.py -y --version 1.3.2
          echo "PATH=${HOME}/.poetry/bin:${PATH}" >> $GITHUB_ENV
          rm install-poetry.py

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@v4
        id: py
        with:
          python-version-file: '.python-version'
          cache: 'poetry'
          cache-dependency-path: '**/pyproject.toml'

      - name: Install Dependencies. From cache if it matches
        shell: bash
        if: steps.py.cache-hit != 'true'
        run: |
          poetry env use ${{ steps.py.outputs.python-version }}
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.options.no-pip true
          poetry config virtualenvs.options.no-setuptools true
          poetry install --with test

      - name: Tests with Pytest
        shell: bash
        run: poetry run coverage run -m pytest --verbose --durations=20 --durations-min=2.0 --splits 5 --group ${{ matrix.group }} --splitting-algorithm least_duration ./

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage${{ matrix.group }}
          path: .coverage

  coverage:
    needs: testing
    runs-on: ubuntu-latest

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@v4
        id: pycov
        with:
          python-version-file: '.python-version'
          cache: 'poetry'

      - name: Install and configure Poetry on ${{ steps.pycov.outputs.python-version }}
        shell: bash
        run: |
          python -m pip install poetry==1.3.2
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.options.no-pip true
          poetry config virtualenvs.options.no-setuptools true

      - name: Install Dependencies. From cache if it matches
        shell: bash
        if: steps.pycov.cache-hit != 'true'
        run: poetry install --only coverage

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Report coverage
        shell: bash
        run: |
          poetry run coverage combine coverage*/.coverage*
          poetry run coverage report
