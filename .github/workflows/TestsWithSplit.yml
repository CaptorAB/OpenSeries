name: TestsWithSplit

on:
  workflow_dispatch:
  push:
    branches:
      - "*" # matches every branch that doesn't contain a '/'
      - "*/*" # matches every branch containing a single '/'
      - "**" # matches every branch

jobs:
  testing:
    strategy:
      fail-fast: false
      matrix:
        group: [ 1, 2, 3, 4, 5 ]
    runs-on: ubuntu-latest

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        id: py
        with:
          python-version-file: '.python-version'

      - name: Install and configure Poetry
        shell: bash
        run: |
          ${{ steps.py.outputs.python-path }} -m pip install poetry==1.3.2
          ${{ steps.py.outputs.python-path }} -m poetry config virtualenvs.in-project true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: |
            .venv
            poetry.lock
          key: venv-${{ runner.os }}-python-${{ steps.py.outputs.python-version }}-${{ hashFiles('pyproject.toml') }}

      - name: Install Dependencies
        shell: bash
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with test

      - name: Tests with Pytest
        shell: bash
        run: poetry run coverage run -m pytest --verbose --durations=20 --durations-min=2.0 --splits 5 --group ${{ matrix.group }} --splitting-algorithm least_duration ./

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage${{ matrix.group }}
          path: .coverage

  coverage:
    needs: testing
    runs-on: ubuntu-latest

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        id: pycov
        with:
          python-version-file: '.python-version'

      - name: Install and configure Poetry
        shell: bash
        run: |
          ${{ steps.pycov.outputs.python-path }} -m pip install poetry==1.3.2
          ${{ steps.pycov.outputs.python-path }} -m poetry config virtualenvs.in-project true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: |
            .venv
            poetry.lock
          key: venv-${{ runner.os }}-python-${{ steps.py.outputs.python-version }}-${{ hashFiles('pyproject.toml') }}

      - name: Install Dependencies
        shell: bash
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --only coverage

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Report coverage
        shell: bash
        run: |
          poetry run coverage combine coverage*/.coverage*
          poetry run coverage report
