name: Deploy

on: workflow_dispatch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        id: py
        with:
          python-version-file: '.python-version'

      - name: Install and configure Poetry
        run: |
          ${{ steps.py.outputs.python-path }} -m pip install poetry==1.3.2
          ${{ steps.py.outputs.python-path }} -m poetry config virtualenvs.in-project true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies on Python ${{ steps.py.outputs.python-version }}
        run: |
          poetry install --with test
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Tests with Pytest
        run: poetry run coverage run -m pytest --verbose --durations=20 --durations-min=2.0 --splits 5 --group ${{ matrix.group }} --splitting-algorithm least_duration ./

      - name: Report coverage
        run: poetry run coverage report

      - name: Build and Publish to Test PyPI
        uses: JRubics/poetry-publish@v1.16
        with:
          python_version: ${{ steps.py.outputs.python-version }}
          pypi_token: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_name: "testpypi"
          repository_url: "https://test.pypi.org/legacy/"
          build_format: "wheel"
          ignore_dev_requirements: "yes"

      - name: Build and Publish to PyPI
        uses: JRubics/poetry-publish@v1.16
        with:
          python_version: ${{ steps.py.outputs.python-version }}
          pypi_token: ${{ secrets.PYPI_API_TOKEN }}
          build_format: "wheel"
          ignore_dev_requirements: "yes"
