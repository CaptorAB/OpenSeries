name: Deploy

on: workflow_dispatch

env:
  POETRY_VER: 1.3.2

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@v4
        id: setup_python
        with:
          python-version-file: '.python-version'

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@v4
        id: setup_python
        with:
          python-version-file: '.python-version'

      - name: Install Poetry ${{ env.POETRY_VER }}
        shell: bash
        run: |
          curl -O -sSL https://install.python-poetry.org/install-poetry.py
          python install-poetry.py -y --version ${{ env.POETRY_VER }}
          echo "PATH=${HOME}/.poetry/bin:${PATH}" >> $GITHUB_ENV
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.options.no-pip true
          poetry config virtualenvs.options.no-setuptools true
          poetry env use ${{ steps.setup_python.outputs.python-version }}
          rm install-poetry.py

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: .venv
          key: pydeps-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies on Python ${{ steps.setup_python.outputs.python-version }}
        shell: bash
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: poetry install --no-root --with test

      - name: Tests with Pytest
        run: poetry run coverage run -m pytest --verbose --durations=20 --durations-min=2.0

      - name: Report coverage
        run: poetry run coverage report

      - name: Build and Publish to Test PyPI
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.testpypi ${{ secrets.TEST_PYPI_API_TOKEN }}
          poetry build --format=wheel
          poetry check
          poetry publish --repository testpypi --skip-existing

      - name: Build and Publish to PyPI
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
          poetry build --format=wheel
          poetry check
          poetry publish
