name: Deploy

on: workflow_dispatch

env:
  POETRY_VER: 1.4.0

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@v4
        id: setup_python
        with:
          python-version-file: '.python-version'

      - name: Load cached $HOME/.local
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('.github/workflows/deploy.yml') }}

      - name: Install Poetry ${{ env.POETRY_VER }} on Python ${{ steps.setup_python.outputs.python-version }}
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VER }}

      - name: Load cached venv
        id: cached_venv
        uses: actions/cache@v3
        with:
          path: ./.venv
          key: venv-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('.github/workflows/deploy.yml') }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies on Python ${{ steps.setup_python.outputs.python-version }}
        shell: bash
        if: steps.cached_venv.outputs.cache-hit != 'true'
        run: |
          poetry config virtualenvs.prefer-active-python true
          poetry install --no-root --with dev

      - name: Check with Flake8
        shell: bash
        run: |
          lintresult=$(poetry run flake8 .)
          if [[ "$lintresult" -eq 0 || "$lintresult" -eq "0" ]]; then
              echo "Flake8 linting is OK"
          else
              echo "$lintresult"
          fi

      - name: Type check with Mypy
        shell: bash
        run: poetry run mypy .

      - name: Lint check with Pylint
        shell: bash
        run: poetry run pylint ./openseries/* ./tests/*

      - name: Tests with Pytest
        run: poetry run coverage run -m pytest --verbose --durations=20 --durations-min=2.0

      - name: Report coverage
        run: poetry run coverage report

      - name: Build and Publish to Test PyPI
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.testpypi ${{ secrets.TEST_PYPI_API_TOKEN }}
          poetry build --format=wheel
          poetry check
          poetry publish --repository testpypi --skip-existing

      - name: Build and Publish to PyPI
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
          poetry build --format=wheel
          poetry check
          poetry publish
