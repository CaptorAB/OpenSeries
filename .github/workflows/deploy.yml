name: deploy

on: workflow_dispatch

env:
  POETRY_VER: 1.6.1

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@v4
        id: setup_python
        with:
          python-version-file: '.python-version'

      - name: Restore cache
        uses: actions/cache/restore@v3
        id: restore_cache
        with:
          path: |
            ~/.local
            ./.venv
          key: venv-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('.github/workflows/deploy.yml') }}-${{ hashFiles('**/pyproject.toml') }}

      - name: Install Poetry ${{ env.POETRY_VER }} on Python ${{ steps.setup_python.outputs.python-version }}
        if: steps.restore_cache.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VER }}
          virtualenvs-in-project: true
          virtualenvs-path: ./.venv

      - name: Configure Poetry ${{ env.POETRY_VER }}
        if: steps.restore_cache.outputs.cache-hit != 'true'
        run: |
          poetry config cache-dir ~/.local
          poetry config virtualenvs.options.no-pip true
          poetry config virtualenvs.options.no-setuptools true
          poetry config --list

      - name: Install dependencies on Python ${{ steps.setup_python.outputs.python-version }}
        if: steps.restore_cache.outputs.cache-hit != 'true'
        run: poetry install --no-root --with dev

      - name: Check and fix with Ruff
        run: |
          poetry run ruff check ./openseries/*.py --fix --exit-non-zero-on-fix
          poetry run ruff check ./tests/*.py --fix --exit-non-zero-on-fix

      - name: Format with Black
        run: poetry run black ./openseries/*.py ./tests/*.py

      - name: Type check with Mypy
        run: poetry run mypy .

      - name: Tests with Pytest
        run: poetry run coverage run -m pytest --verbose

      - name: Report coverage
        run: poetry run coverage report

      - name: Create Git Tag with version from pyproject.toml
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --import
          version=$(poetry run python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
          echo "Version: $version"
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR_EMAIL}"
          git config --global user.signingkey 03BE0D766CA0CF9852B592D5BBE8A9CD2E275A01
          git config --global gpg.program gpg
          git tag -s -a "$version" -m "Release v$version"
          git push origin "$version"
          echo "tag_version=$version" >> "$GITHUB_ENV"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.tag_version }}

      - name: Build and Publish to Test PyPI
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.testpypi ${{ secrets.TEST_PYPI_API_TOKEN }}
          poetry build --format=wheel
          poetry check
          poetry publish --repository testpypi --skip-existing

      - name: Build and Publish to PyPI
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
          poetry build --format=wheel
          poetry check
          poetry publish

      - name: Save cache
        if: steps.restore_cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.local
            ./.venv
          key: venv-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('.github/workflows/deploy.yml') }}-${{ hashFiles('**/pyproject.toml') }}
