name: pylint

on:
  workflow_dispatch:
  push:
    branches:
      - "*" # matches every branch that doesn't contain a '/'
      - "*/*" # matches every branch containing a single '/'
      - "**" # matches every branch

env:
  POETRY_VER: 1.5.1

jobs:
  codecheck:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@v4
        id: setup_python
        with:
          python-version-file: '.python-version'

      - name: Restore cache
        uses: actions/cache/restore@v3
        id: restore_cache
        with:
          path: |
            ~/.local
            ./.venv
          key: venv-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('.github/workflows/pylint.yml') }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry ${{ env.POETRY_VER }} on Python ${{ steps.setup_python.outputs.python-version }}
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VER }}
          virtualenvs-in-project: true
          virtualenvs-path: ./.venv

      - name: Configure Poetry ${{ env.POETRY_VER }}
        run: |
          poetry config cache-dir ~/.local
          poetry config virtualenvs.options.no-pip true
          poetry config virtualenvs.options.no-setuptools true
          poetry config --list

      - name: Install dependencies on Python ${{ steps.setup_python.outputs.python-version }}
        if: steps.restore_cache.outputs.cache-hit != 'true'
        run: poetry install --no-root --with dev

      - name: Format with Black
        run: poetry run black ./openseries/*.py ./tests/*.py

      - name: Check with Flake8
        run: poetry run flake8

      - name: Type check with Mypy
        run: poetry run mypy .

      - name: Lint check with Pylint
        run: poetry run pylint ./openseries/* ./tests/*
