name: TestsWithSplitOLD

on:
  workflow_dispatch:

jobs:
  testing:
    strategy:
      fail-fast: false
      matrix:
        group: [ 1, 2, 3, 4, 5 ]
    runs-on: ubuntu-latest

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@v4
        id: py
        with:
          python-version-file: '.python-version'

      - name: Load cached $HOME/.local
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-python-${{ steps.py.outputs.python-version }}-${{ hashFiles('.github/workflows/TestsWithSplitOLD.yml') }}

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.3.2

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: ./.venv
          key: venv-${{ runner.os }}-python-${{ steps.py.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/TestsWithSplitOLD.yml') }}

      - name: Install Dependencies
        shell: bash
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry env use ${{ steps.py.outputs.python-version }}
          poetry install --no-root --with test

      - name: Tests with Pytest
        shell: bash
        run: poetry run coverage run -m pytest --verbose --durations=20 --durations-min=2.0 --splits 5 --group ${{ matrix.group }} --splitting-algorithm least_duration ./

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage${{ matrix.group }}
          path: .coverage

  coverage:
    needs: testing
    runs-on: ubuntu-latest

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@v4
        id: py
        with:
          python-version-file: '.python-version'

      - name: Load cached $HOME/.local
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-python-${{ steps.py.outputs.python-version }}-${{ hashFiles('.github/workflows/TestsWithSplitOLD.yml') }}

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.3.2

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: ./.venv
          key: venv-${{ runner.os }}-python-${{ steps.py.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/TestsWithSplitOLD.yml') }}

      - name: Install Dependencies
        shell: bash
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry env use ${{ steps.py.outputs.python-version }}
          poetry install --no-root --only coverage

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Report coverage
        shell: bash
        run: |
          poetry run coverage combine coverage*/.coverage*
          poetry run coverage report
