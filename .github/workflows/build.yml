name: Build

on: workflow_dispatch

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        include:
          - os: ubuntu-latest
            path: ~/.cache/pip
          - os: macos-latest
            path: ~/Library/Caches/pip
          - os: windows-latest
            path: ~\AppData\Local\pip\Cache

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        id: py
        with:
          python-version-file: '.python-version'

      - if: ${{ matrix.os == 'windows-latest' }}
        name: Use GNU tar
        shell: cmd
        run: |
          echo "Adding GNU tar to PATH"
          echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"

      - name: Install and configure Poetry
        run: |
          ${{ steps.py.outputs.python-path }} -m pip install poetry==1.3.2
          ${{ steps.py.outputs.python-path }} -m poetry config virtualenvs.in-project true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: |
            .venv
            poetry.lock
          key: venv-${{ runner.os }}-python-${{ steps.py.outputs.python-version }}-${{ hashFiles('pyproject.toml') }}

      - name: Install Dependencies
        shell: bash
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with test

      - name: Tests with Pytest
        run: poetry run coverage run -m pytest --verbose --durations=20 --durations-min=2.0

      - name: Report coverage
        run: poetry run coverage report

      - name: Package and check
        run: |
          poetry build
          poetry check
