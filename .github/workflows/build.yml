name: Build

on: workflow_dispatch

env:
  POETRY_VER: 1.4.0

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        python-version: [ '3.10', '3.11' ]

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@v4
        id: setup_python
        with:
          python-version: ${{ matrix.python-version }}

      - name: Load cached $HOME/.local
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('.github/workflows/build.yml') }}

      - name: Install Poetry ${{ env.POETRY_VER }} on Python ${{ steps.setup_python.outputs.python-version }}
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VER }}

      - name: Load cached venv
        id: cached_venv
        uses: actions/cache@v3
        with:
          path: ./.venv
          key: venv-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('.github/workflows/build.yml') }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies on Python ${{ steps.setup_python.outputs.python-version }}
        shell: bash
        if: steps.cached_venv.outputs.cache-hit != 'true'
        run: |
          poetry config virtualenvs.prefer-active-python true
          poetry install --no-root --with dev

      - name: Tests with Pytest
        shell: bash
        run: |
          poetry run coverage run -m pytest --verbose --durations=20 --durations-min=2.0 --splits 5 --group 1 --splitting-algorithm least_duration
          poetry run coverage run -m pytest --verbose --durations=20 --durations-min=2.0 --splits 5 --group 2 --splitting-algorithm least_duration
          poetry run coverage run -m pytest --verbose --durations=20 --durations-min=2.0 --splits 5 --group 3 --splitting-algorithm least_duration
          poetry run coverage run -m pytest --verbose --durations=20 --durations-min=2.0 --splits 5 --group 4 --splitting-algorithm least_duration
          poetry run coverage run -m pytest --verbose --durations=20 --durations-min=2.0 --splits 5 --group 5 --splitting-algorithm least_duration

      - name: Combine and report coverage
        shell: bash
        run: |
          poetry run coverage combine coverage*/.coverage*
          poetry run coverage report

      - name: Package and check
        shell: bash
        run: |
          poetry build
          poetry check
