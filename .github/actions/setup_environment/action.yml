name: 'Install Environment and Dependencies'
description: 'Install environment, loads cached venv and install dependencies'

inputs:
  python_version:
    description: 'Python version from matrix or file'
    type: string
    required: true
  poetry_version:
    description: 'Controlling which poetry version to install'
    type: string
    required: true

runs:
  using: 'composite'
  steps:

    - name: Cache Poetry cache
      id: cached-poetry
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: poetry-cache-${{ runner.os }}-${{ inputs.python_version }}-${{ inputs.poetry_version }}

    - name: Write cache version
      shell: bash
      run: echo $CACHE_VERSION >> cache_version
      env:
        CACHE_VERSION: ${{ inputs.cache_version }}

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: ~/.local
        key: venv-${{ runner.os }}-python-${{ steps.py.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('cache_version') }}
        restore-keys: |
          venv-${{ runner.os }}-python-${{ steps.py.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-

    - name: Set up Python on ${{ runner.os }}
      uses: actions/setup-python@v4
      id: py
      with:
        python-version: ${{ inputs.python_version }}

    - name: Install Poetry
      shell: bash
      run: |
        python -m pip install poetry==1.3.2
        poetry config --list

    - name: Install Dependencies
      shell: bash
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry env use ${{ steps.py.outputs.python-version }}
        poetry install --no-root --with test

    - name: Save dependencies to cache
      uses: actions/cache/save@v3
      with:
        path: ./.venv
        key: venv-${{ runner.os }}-python-${{ steps.py.outputs.python-version }}-poetry_lock-${{ hashFiles('**/poetry.lock') }}-github_run_id-${{ github.run_id }}
